给定一个数组 nums，有一个大小为 k 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口 k 内的数字。滑动窗口每次只向右移动一位。

返回滑动窗口最大值。

示例:

输入: nums = [1,3,-1,-3,5,3,6,7], 和 k = 3
输出: [3,3,5,5,6,7]
解释:

  滑动窗口的位置                最大值
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7
注意：

你可以假设 k 总是有效的，1 ≤ k ≤ 输入数组的大小，且输入数组不为空。

一开始使用Brute Force居然也可以过，但是只击败了5%的代码。后来经过思考，可以使用O(1)的空间定义两个变量curMax和curMaxIndex。对第一个窗口，初始化这两个变量。然后就是在区间[i, i + k - 1]中寻找最大值。因为之前的最大值是在区间[i - 1, i + k - 2]中找到的，那么有三种情况：

nums[i + k - 1] >= curMax：新窗口的最右端大于原来的最大值，那么将最大值替换。
此时窗口最大值必定小于之前窗口的最大值，如果curMaxIndex >= i，即原来的最大值仍在新窗口内，则也可以。
此时必须重新在新窗口中找到最大值，以更新curMax和curMaxIndex。